
flash.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d2  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000004f8  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bae  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001200  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000be  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  000012de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000058  00000000  00000000  000012f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>

int main(){
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xff;
  74:	8a e3       	ldi	r24, 0x3A	; 58
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	2f ef       	ldi	r18, 0xFF	; 255
  7a:	fc 01       	movw	r30, r24
  7c:	20 83       	st	Z, r18
	PORTA = 0xff;
  7e:	8b e3       	ldi	r24, 0x3B	; 59
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	fc 01       	movw	r30, r24
  86:	20 83       	st	Z, r18
	DDRB = 0xff;
  88:	87 e3       	ldi	r24, 0x37	; 55
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	PORTB = 0xff;
  92:	88 e3       	ldi	r24, 0x38	; 56
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
	DDRC = 0xff;
  9c:	84 e3       	ldi	r24, 0x34	; 52
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
	PORTC = 0xff;
  a6:	85 e3       	ldi	r24, 0x35	; 53
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
	DDRD = 0xff;
  b0:	81 e3       	ldi	r24, 0x31	; 49
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18
	PORTD = 0xff;
  ba:	82 e3       	ldi	r24, 0x32	; 50
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
	return 0;
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
}
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
